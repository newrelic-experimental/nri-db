plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply the shadow/uber jar plugin
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    // Apply the eclipse plugin for those developing in Eclipse.
    id 'eclipse'
    // Apply the checkstyle plugin
    id 'checkstyle'
    // Apply the task tree plugin that is useful for gradle sanity
    id 'org.barfuin.gradle.taskinfo' version '1.0.5'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    // Logging
    implementation "org.slf4j:slf4j-api:${project['slf4j-api.version']}"
    implementation "org.slf4j:slf4j-jdk14:${project['slf4j-jdk14.version']}"

    // Infra connector and deps
    implementation "com.newrelic.experts:infra_publish:${project['infra_publish.version']}"
    implementation "com.google.code.gson:gson:${project['gson.version']}"

    // Password encryption
    implementation "org.jasypt:jasypt:${project['jasypt.version']}"

    // Commons lang for string utilities
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // Built-in database support
    // These drivers use permissive licenses and are therefore OK to distribute.
    implementation "org.postgresql:postgresql:${project['postgresql.version']}"
    implementation "org.hsqldb:hsqldb:${project['hsqldb.version']}"

    // Use JUnit test framework.
    testImplementation "junit:junit:${project['junit.version']}"

    // Additional database support
    // These drivers user viral licenses and can not be distributed.
    // Clients must install these drivers manually depending on the database(s) being used.
    testImplementation "mysql:mysql-connector-java:${project['mysql.version']}"
    testImplementation "com.microsoft.sqlserver:mssql-jdbc:${project['mssql.version']}"
    testImplementation "com.ibm.db2.jcc:db2jcc:${project['db2.version']}"
}

tasks.withType(Checkstyle).configureEach {
    configFile = project.file('checkstyle/checkstyle.xml')
    configDirectory = layout.projectDirectory.dir('checkstyle/')
}

tasks.matching {
    it.name.startsWith('dist')
}.configureEach {
    doFirst {
        file("${buildDir}/.keep").createNewFile()
    }
}

tasks.withType(CreateStartScripts) {
  unixStartScriptGenerator.template = resources.text.fromFile('src/main/resources/unixStartScriptTemplate.txt')
  windowsStartScriptGenerator.template = resources.text.fromFile('src/main/resources/windowsStartScriptTemplate.txt')
}

def commonSpec = project.copySpec {
    from('config') {
      into 'config'
      include 'plugin.sample.json'
      include 'plugin.sybase.json'
      include 'readme.sybase.txt'
      include 'logging.properties'
      exclude '*.bak'
      exclude '*.orig'
    }
    from('examples') {
      into 'examples'
    }
    from('bin') {
      into 'bin'
    }
    from('install') {
      into 'install'
    }
    from("${buildDir}/.keep") {
      into 'logs'
    }
    from('helm') {
      into 'helm'
    }
    from 'README.md'
    from 'Dockerfile'
    from 'docker-compose.yml'
}

distributions {
  main {
    contents {
      with commonSpec
    }
  }
  shadow {
    contents {
      with commonSpec
    }
  }
}

task createEncryptPasswordScripts(type: CreateStartScripts) {
  outputDir = file('build/scripts')
  mainClass = 'com.newrelic.infra.db.security.Main'
  applicationName = 'encrypt-password'
  classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

task createEncryptPasswordShadowScripts(type: CreateStartScripts) {
  outputDir = file('build/scriptsShadow')
  mainClass = 'com.newrelic.infra.db.security.Main'
  applicationName = 'encrypt-password'
  classpath = shadowJar.outputs.files
}

startScripts.dependsOn createEncryptPasswordScripts, createEncryptPasswordShadowScripts

eclipse {
  classpath {
    defaultOutputDir = file("build")
    file.whenMerged {
      entries.each { entry ->
        if (entry.kind == 'src' && entry.hasProperty('output')) {
          entry.output = entry.output.replace('bin/', "build/")
        }
      }
    }
  }
}

def infraDbMainClass = 'com.newrelic.infra.db.Main'

shadowJar {
  mainClassName = infraDbMainClass
}

task runNriDb(type: JavaExec) {
  classpath = sourceSets.test.runtimeClasspath
  main = infraDbMainClass
}

application {
    // Define the main class for the application.
    mainClass = infraDbMainClass
    // Add the logging option
    applicationDefaultJvmArgs = ['-Djava.util.logging.config.file=config/logging.properties']
}
